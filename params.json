{"name":"Qlogger","tagline":"QLogger - A tiny Qt logging framework.","body":"## QLogger - A tiny Qt logging framework\r\n\r\nThe purpose of this logging framework is to be easy to configure and use on \r\na Qt project.\r\nQLogger rely only on Qt framework, so it does not have any other \r\nexternal dependencies.\r\n\r\nThe project is available as QtCreator console project. One could just create a\r\nLib project or add the source directly to a project. In the source folder there\r\nis a main file with some tests that can be used also as example.\r\n\r\nIf you want to fork, share, use or just give suggestions feel free. I'll be glad to hear\r\ncomments and critics on the code too, don't hesitate to contact me.\r\n\r\n**The code is licensed under MIT License.**\r\n\r\n### How to use it\r\n\r\n`// simple use:`  \r\n`#include \"qlogger.h\"`  \r\n`using namespace qlogger;`  \r\n`int main(int argc, char *argv[])`  \r\n`{`   \r\n`    QLOG_FATAL(\"this is quick logged using the default root logger\");`    \r\n`\t//or for the ones who does not like macros`   \r\n`\tQLogger::fatal(\"this is quick logged using the default root logger\")`;   \r\n`...`   \r\n\r\n_This simple example logs a message on the console based on a default logger called \"root\"._\r\n_This log is always created and can be used without passing any arguments, it is default_\r\n_to ERROR level. Log levels are defined as: q0FATAL, q1ERROR, q2WARN, q3INFO, q4DEBUG, q5TRACE_\r\n\r\n***\r\n\r\n`// overriding log configurations:`   \r\n`#include \"qlogger.h\"`     \r\n`using namespace qlogger;`     \r\n`int main(int argc, char *argv[])`     \r\n`{`    \r\n`\tQLogger::addLogger(\"root\", Configuration::q2WARN, Configuration::TEXTFILE);`     \r\n`    QLOG_WARN(\"this is quick logged using the default root logger\");`     \r\n`...`    \r\n\r\n_On this example we add another level to \"root\" logger, but this time the logging will_\r\n_be done to a text file. A logger can have multiple outputs. But note that the log message_\r\n_will not be displayed on the cosole because its on a level greater than ERROR, if we change_\r\n_code to:-\r\n    `QLOG_ERROR(\"this is quick logged using the default root logger\");`\r\n-then we will have a log on both console and text file._\r\n\r\n***\r\n\r\n_A logger can be created with a whole custom configuration:_\r\n\r\n`// overriding log configurations:`    \r\n`#include \"qlogger.h\"`    \r\n`using namespace qlogger;`    \r\n`int main(int argc, char *argv[])`    \r\n`{`    \r\n`\tConfiguration* cfg =`    \r\n`       new Configuration(\"config\", Configuration::q3INFO, Configuration::TEXTFILE,`    \r\n`                          \"dd-MM-yyyy hh:mm:ss\", \"%t [%l] <%o> : %m\",`    \r\n`                          \"myfile_%3_%2_%1.log\", \"ddMMyyyy_hhmmss\", \"c:\\\\\", 10000);`    \r\n`   QLogger::addLogger(cfg);`     \r\n`\t...`    \r\n`\tQLOG_WARN(\"this will be saved on a file at c:\", \"config\");`   \r\n`...`    \r\n\r\n_By default text files are saved on application path, but this can be configured as_\r\n_the example above shows, also there is options to change the text log format the _\r\n_file name and the maximum size of a log file (when this limit is reached the logger_\r\n_just create another file). _\r\n\r\n***\r\n\r\n_Console and TextFile logs uses a mask to generate the log string to be displayed._\r\n_The default mask is: %t [%o] <%l> (%f) {line:%n} - %m where the sysmbols are:_   \r\n\r\n* %t - the log timestamp   \r\n* %o - the log owner (\"root\", or on the previous example \"config\")\r\n* %l - the level of the log.\r\n* %f - the name of the function where the log was called \r\n* \t(note that this rely on the macro __FUNCTION__ and only works with macro loggers).\r\n* %n - the line number where the log was called (use the macro __LINE__, same as above).\r\n* %m - the log message itself.\r\n\r\n_Date Time masks are available for both file name and the log, both masks use Qt DateTime_\r\n_formatting rules._   \r\n\r\n***\r\n   \r\n`// log configurations loaded from a qlogger.cfg file:`    \r\n`#include \"qlogger.h\"`    \r\n`using namespace qlogger;`    \r\n`int main(int argc, char *argv[])`    \r\n`{`    \r\n`\tQLOG_WARN(\"loaded a log from config and save to a file !!!!\", \"file\");`    \r\n`...`    \r\n \r\n_This example shows a logger that was added from a configuration file. In order _\r\n_to use a configuration file, one can simply add a qlogger.cfg (plain text) file_\r\n_onto application path. QLogger will parse the file when the first instance of _\r\n_logger is called. Note that this also allows adding logs programatically so_\r\n_they both can be used together._\r\n\r\n_Example of a configuration file for QLogger:_\r\n\r\n`# line comment `    \r\n`# first configuration will log to warn level to a file on c:\\ with 1Mb of size`    \r\n`file.level=warn`    \r\n`file.outputType=text`    \r\n`# 10mb file`    \r\n`file.maxFileSize=1000`    \r\n`file.path=c:\\`   \r\n`# second config will log to console with trace level and customized log text mask`   \r\n`cons.level=trace`    \r\n`cons.outputType=console`    \r\n`cons.logMask=time:%t owner:%o level:%l function:%f line:%n message:%m`    \r\n   \r\n***\r\n   \r\n## Further\r\n\r\n_This small readme covered almost everything QLogger is capable to do, there are some_\r\n_other configurations and details, but they are pretty straight forward to understand_\r\n_by reading the code._     \r\n     \r\n_I hope this tiny project could be useful to you._   \r\n\r\n**Regards,**    \r\n**Sandro.**","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}